% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pci.R, R/pcir.package.R
\name{pci}
\alias{pci}
\title{Calculate the Potential for Conflict Index (PCI2)}
\usage{
pci(
  data,
  scale_type = c("bipolar_with_neutral", "bipolar_without_neutral", "unipolar"),
  min_scale_value,
  max_scale_value,
  exponent = 1
)

pci(
  data,
  scale_type = c("bipolar_with_neutral", "bipolar_without_neutral", "unipolar"),
  min_scale_value,
  max_scale_value,
  exponent = 1
)
}
\arguments{
\item{data}{A data frame with columns named like 'Count X' (where X is a scale value),
or a named numeric vector of counts.}

\item{scale_type}{Type of scale: \code{'bipolar_with_neutral'}, \code{'bipolar_without_neutral'}, or \code{'unipolar'}.}

\item{min_scale_value}{The minimum value of the scale (e.g., -2 or 1).}

\item{max_scale_value}{The maximum value of the scale (e.g., 2 or 9).}

\item{exponent}{A number to raise distances to. Use \code{1} for linear distance,
\code{2} for squared distance, etc. Default is \code{1}.}
}
\value{
If \code{data} is a data frame, it returns the same data frame with an added \code{PCI} column.
If \code{data} is a named numeric vector, it returns the PCI value directly.

If \code{data} is a data frame, it returns the same data frame with an added \code{PCI} column.
If \code{data} is a named numeric vector, it returns the PCI value directly.
}
\description{
This function computes the PCI2 (a generalized Potential for Conflict Index) for each item in a
summarized data frame (typically from the \code{counting()} function), or for a single named numeric vector
of counts. It works with three types of scales: \code{bipolar_with_neutral}, \code{bipolar_without_neutral}, and \code{unipolar}.

Calculate the Potential for Conflict Index (PCI).
This function computes the PCI2 (a generalized Potential for Conflict Index) for each item in a
summarized data frame (typically from the \code{counting()} function), or for a single named numeric vector
of counts. It works with three types of scales: \code{bipolar_with_neutral}, \code{bipolar_without_neutral}, and \code{unipolar}.
}
\details{
For unipolar scales, PCI2 is based on all pairwise distances between categories.

For bipolar scales, PCI2 considers distances between opposing poles, ignoring neutral (0) in
the case of \code{bipolar_without_neutral}. In \code{bipolar_with_neutral}, 0 is included in the scale
but not in the calculation of conflict.

The maximum possible polarization (used for normalization) assumes a perfectly split distribution.

For unipolar scales, PCI2 is based on all pairwise distances between categories.

For bipolar scales, PCI2 considers distances between opposing poles, ignoring neutral (0) in
the case of \code{bipolar_without_neutral}. In \code{bipolar_with_neutral}, 0 is included in the scale
but not in the calculation of conflict.

The maximum possible polarization (used for normalization) assumes a perfectly split distribution.
}
\examples{
df1 <- data.frame(
  A = c(-1, -1, -1, 0, -1),
  B = c(-1, 1, 0, -1, 1),
  C = c(0, 0, 1, 0, -1),
  D = c(0, -1, 1, 1, 1),
  E = c(1, 1, 0, -1, -1)
)
df2 <- counting(df1, cols = c('A', 'B', 'C', 'D', 'E'))
pci(df2, scale_type = 'bipolar_with_neutral', min_scale_value = -1, max_scale_value = 1)

df1 <- data.frame(
  A = c(-1, -1, -1, 0, -1),
  B = c(-1, 1, 0, -1, 1),
  C = c(0, 0, 1, 0, -1),
  D = c(0, -1, 1, 1, 1),
  E = c(1, 1, 0, -1, -1)
)
df2 <- counting(df1, cols = c('A', 'B', 'C', 'D', 'E'))
pci(df2, scale_type = 'bipolar_with_neutral', min_scale_value = -1, max_scale_value = 1)

}
