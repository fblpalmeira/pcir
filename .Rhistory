knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
)
# Define the content of README.Rmd
readme_rmd_content <- "
---
title: 'pcir: Potential for Conflict Index in R'
output: github_document
---
"
# pcir <a href=\"https://fblpalmeira.github.io/pcir/\"><img src=\"man/figures/pcir_logo.png\" alt=\"pcir website\" align=\"right\" height=\"139\"/></a>
"
```{r, include = FALSE}
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
)
# pcir <a href=\"https://fblpalmeira.github.io/pcir/\"><img src=\"man/figures/pcir_logo.png\" alt=\"pcir website\" align=\"right\" height=\"139\"/></a>
"
```{r, include = FALSE}
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",  # Add comma here
)
library(pcir)
library(devtools)
create_package("D:/Francesca/pcir")
library(devtools)
create_package("D:/Francesca/pcir")
# Set the directory for saving R scripts
r_directory <- file.path("D:/Francesca/pcir", "R")
# Ensure the R directory exists
if (!dir.exists(r_directory)) {
dir.create(r_directory)
}
# Set the local directory
local_dir <- "D:/Francesca/pcir"
counting_code <- "
#' Create a Count Table with Percentages, Mean, and SD
#'
#' This function takes a data frame, transforms it by computing counts, percentages,
#' mean, and standard deviation for specified columns. It helps in summarizing
#' the data to understand the distribution and variation.
#'
#' @param df1 A data frame containing the data to be processed. The data frame
#' should have at least 5 columns to select from.
#' @return A data frame with computed statistics, including counts, percentages,
#' mean, and standard deviation.
#' @examples
#' df1 <- data.frame(A = c(-1, 2, 2, 3, -1), B = c(-1, 2, 3, -1, 2),
#' C = c(1, 2, -2, 3, -1), D = c(3, 2, 1, -1, -2), E = c(2, 3, 1, -1, -3))
#' result <- counting(df1)
#' print(result)
#' @export
counting <- function(df1) {
df1 [,-1] %>%
#select(2:6) %>%
pivot_longer(everything()) %>%
group_by(name, value) %>%
summarise(Count = n()) %>%
group_by(name) %>%
mutate(\`%\` = 100 * (Count / sum(Count)),
Mean = weighted.mean(value, Count),
SD = sqrt(Hmisc::wtd.var(value, Count)),
Total = sum(Count)) %>%
ungroup() %>%
pivot_wider(names_from = 'value',
names_sep = ' ',
values_from = c('Count', \`%\`),
names_vary = 'slowest')
}
"
writeLines(counting_code, file.path(r_directory, "counting.R"))
pci_code <- "
#' PCI Function
#'
#' @description Calculate the Potential for Conflict Index (PCI).
#' @param df2 A data frame generated by the `counting` function.
#' @return A data frame with the calculated PCI values for each group.
#' @examples
#' df2 <- counting(df1)
#' pci(df2)
#' @export
pci <- function(df2) {
df2$nu <- 1 * df2$`Count -1`  # For Count -1 column
df2$na <- 1 * df2$`Count 1`   # For Count 1 column
df2$xt <- df2$nu + df2$na     # Sum of nu and na
df2$z <- df2$Total            # Total count
df2$PCI <- (1 - (df2$na / df2$xt - df2$nu / df2$xt)) * df2$xt / df2$z
df2 <- df2 %>% mutate_if(is.numeric, round, digits = 2)
return(df2)
}
"
writeLines(pci_code, file.path(r_directory, "pci.R"))
# Define and save the bubble function
bubble_code <- "
#' Create a Bubble Plot for PCI Visualization
#'
#' This function generates a bubble plot to visualize the results of the PCI
#' calculation. It shows the mean action acceptability on the y-axis and the PCI
#' value as the size of the bubbles.
#'
#' @param df3 A data frame generated by the pci function, containing the PCI
#' values and other statistics.
#' @return A ggplot2 object representing the bubble plot.
#' @examples
#' df3 <- pci(df2)
#' p <- bubble(df3)
#' print(p)
#' @export
bubble <- function(df3) {
ggplot(df3, aes(x = name, y = Mean, size = PCI)) +
geom_hline(yintercept = 0, colour = 'black') +
geom_point(color = 'gray', show.legend = TRUE) +
geom_text(aes(label = after_stat(df3$PCI)),
nudge_y = 0.35, nudge_x = 0.1, size = 5) +
ylab('Action acceptability') + xlab('') +
ylim(-1, 1) +
scale_size_area(max_size = 14) +
theme_minimal() +
theme(panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text.x = element_text(size = 14, angle = 45, vjust = 1, hjust = 1),
axis.text.y = element_text(size = 14),
axis.line.x = element_line(colour = 'white'),
axis.line.y = element_line(colour = 'black'),
axis.ticks = element_line(colour = 'black'),
legend.key.size = unit(1, 'cm'),
legend.key.height = unit(1, 'cm'),
legend.key.width = unit(1, 'cm'),
legend.title = element_text(size = 16),
legend.text = element_text(size = 14))
}
"
writeLines(bubble_code, file.path(r_directory, "bubble.R"))
# Content for the pcir.package.R file
pcir_package_code <- "
#' pcir Package Functions and Setup
#'
#' This file contains the basic setup and utility functions for the 'pcir' package.
#' The pcir package is designed for calculating, comparing, and visualizing the
#' Potential for Conflict Index (PCI).
#'
#' @section Functions:
#' - `counting()`: Summarize data by calculating counts, percentages, means, and standard deviations.
#' - `pci()`: Compute the Potential for Conflict Index (PCI) from summary data.
#' - `bubble()`: Create a bubble plot to visualize PCI results.
#'
#' @name pcir-package
#' @docType package
#' @import dplyr
#' @import tidyr
#' @import ggplot2
#' @import Hmisc
#' @export counting
#' @export pci
#' @export bubble
NULL
#' Counting Function
#'
#' @description Create a count table with percentages, mean, and standard deviation.
#' @param df1 A data frame containing the data to be processed.
#' @return A data frame with computed statistics.
#' @examples
#' df1 <- data.frame(A = c(-1, 2, 2, 3, -1), B = c(-1, 2, 3, -1, 2),
#'                   C = c(1, 2, -2, 3, -1), D = c(3, 2, 1, -1, -2), E = c(2, 3, 1, -1, -3))
#' counting(df1)
#' @export
counting <- function(df1) {
df1 [,-1]%>%
#select(2:6) %>%
pivot_longer(everything()) %>%
group_by(name, value) %>%
summarise(Count = n()) %>%
group_by(name) %>%
mutate(`%` = 100 * (Count / sum(Count)),
Mean = weighted.mean(value, Count),
SD = sqrt(Hmisc::wtd.var(value, Count)),
Total = sum(Count)) %>%
ungroup() %>%
pivot_wider(names_from = 'value',
names_sep = ' ',
values_from = c('Count', '%'),
names_vary = 'slowest')
}
#' PCI Function
#'
#' @description Calculate the Potential for Conflict Index (PCI).
#' @param df2 A data frame generated by the `counting` function.
#' @return A data frame with the calculated PCI values for each group.
#' @examples
#' df2 <- counting(df1)
#' pci(df2)
#' @export
pci <- function(df2) {
df2$nu <- 1 * df2$`Count -1`
df2$na <- 1 * df2$`Count 1`
df2$xt <- df2$nu + df2$na
df2$z <- 1 * df2$Total
df2$PCI <- (1 - (df2$na / df2$xt - df2$nu / df2$xt)) * df2$xt / df2$z
df2 <- df2 %>% mutate_if(is.numeric, round, digits = 2)
return(df2)
}
#' Bubble Plot Function
#'
#' @description Create a bubble plot to visualize PCI results.
#' @param df3 A data frame generated by the `pci` function.
#' @return A ggplot2 object representing the bubble plot.
#' @examples
#' df3 <- pci(df2)
#' bubble(df3)
#' @export
bubble <- function(df3) {
ggplot(df3, aes(x = name, y = Mean, size = PCI)) +
geom_hline(yintercept = 0, colour = 'black') +
geom_point(color = 'gray', show.legend = TRUE) +
geom_text(aes(label = after_stat(df3$PCI)),
nudge_y = 0.35, nudge_x = 0.1, size = 5) +
ylab('Action acceptability') + xlab('') +
ylim(-1, 1) +
scale_size_area(max_size = 14) +
theme_minimal() +
theme(panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text.x = element_text(size = 14, angle = 45, vjust = 1, hjust = 1),
axis.text.y = element_text(size = 14),
axis.line.x = element_line(colour = 'white'),
axis.line.y = element_line(colour = 'black'),
axis.ticks = element_line(colour = 'black'),
legend.key.size = unit(1, 'cm'),
legend.key.height = unit(1, 'cm'),
legend.key.width = unit(1, 'cm'),
legend.title = element_text(size = 16),
legend.text = element_text(size = 14))
}
"
# Write the content to a file called pcir.package.R
writeLines(pcir_package_code, file.path(r_directory, "pcir.package.R"))
# Define the content of the DESCRIPTION file
description_text <- "
Package: pcir
Type: Package
Title: Potential for Conflict Index in R
Version: 0.1.0
Author: Francesca Palmeira [aut, cre]
Maintainer: Francesca Palmeira <francesca@alumni.usp.br>
Description: An R package to calculate, compare, and visualize the Potential for Conflict Index (PCI).
License: MIT
Encoding: UTF-8
LazyData: true
RoxygenNote: 7.1.1
URL: https://github.com/fblpalmeira/pcir
BugReports: https://github.com/fblpalmeira/pcir/issues
Date: 2024-09-12
"
# Write the description to a DESCRIPTION file
writeLines(description_text, file.path(local_dir, "DESCRIPTION"))
# Define the content of the MIT License
license_text <- "
MIT License
Copyright (c) 2024 Francesca Palmeira
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the \"Software\"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"
# Write the license to a LICENSE file
writeLines(license_text, file.path(local_dir, "LICENSE"))
# Create a citation entry for the pcir package
citation_text <- citation("pcir")
# Convert the citation list to a string with each element on a new line
citation_text_str <- paste(citation_text, collapse = "\n")
# Save the citation to a file
cat(citation_text_str, file = "citation.txt")
# You can also print it to the console to view
print(citation_text)
# Load necessary libraries
library(gh)
library(writexl)
# Define your repository details
repo <- "fblpalmeira/pcir"  # Replace with your GitHub repository, e.g., 'user/repo'
# Fetch the issues from the repository
issues <- gh("GET /repos/:owner/:repo/issues", owner = "fblpalmeira", repo = "pcir")
# Process the issues into a data frame
issues_df <- data.frame(
number = sapply(issues, function(x) x$number),
title = sapply(issues, function(x) x$title),
state = sapply(issues, function(x) x$state),
created_at = sapply(issues, function(x) x$created_at),
updated_at = sapply(issues, function(x) x$updated_at),
body = sapply(issues, function(x) x$body)
)
# Define the file path for the spreadsheet
file_path <- file.path(getwd(), "github_issues.xlsx")
# Write the issues data to an Excel file
write_xlsx(issues_df, file_path)
# Output message indicating the spreadsheet has been created
cat("The GitHub Issues spreadsheet has been created at", file_path, "\n")
# Define the content of README.Rmd
readme_rmd_content <- "
---
output: github_document
---
```{r, include = FALSE}
knitr::opts_chunk$set(
collapse = TRUE,
comment = '#>',
fig.path = 'man/figures/logo_pcir.png', # Remove the trailing comma
out.width = '100%',
eval = TRUE)
library(pcir)
```
# pcir: Potential for Conflict Index in R <a href=\"https://fblpalmeira.github.io/pcir/\"><img src=\"man/figures/pcir_logo.png\" alt=\"pcir website\" align=\"right\" height=\"139\"/></a>
## Overview
`pcir` is an R package designed to help researchers and practitioners calculate,
compare, and visualize the Potential for Conflict Index (PCI). The PCI is a
descriptive statistical method used to enhance understanding of outcomes in
human dimensions research [(Manfredo et al. 2003)](https://www.tandfonline.com/doi/abs/10.1080/10871200304310)
and [(Vaske et al. 2010)](https://www.tandfonline.com/doi/abs/10.1080/01490401003712648).
The package will equip users with the tools required for calculating, comparing,
and graphing the potential for conflict. The concepts of consensus and
disagreement or conflict hold relevance across various fields, including economics,
political science, psychology, sociology, and natural resources. It is worth
noting that although PCI can currently be computed using software such as Excel,
SPSS, and SAS, there is no dedicated R package available for conducting this
specific analysis.
Additional information:
- [rOpenSci Champions Program](https://ropensci.org/champions/)
- [Introducing rOpenSci Champions - Cohort 2023-2024](https://ropensci.org/blog/2024/02/15/champions-program-champions-2024/)
## Theoretical approach
**Figure 1.** Likert scales of the Potential for Conflict Index (PCI).
## Workflow
Stages of the 'pcir' package:
1. Read the data input from the interviews;
2. Count the frequencies of responses within each question / Write [(Table 1)](https://github.com/fblpalmeira/pcir/blob/main/data/Table1.xlsx);
3. Calculate the potential conflict index for each question / Write [(Table 2)](https://github.com/fblpalmeira/pcir/blob/main/data/Table2.xlsx);
4. Create a bubble chart using the indices / Save [(Figure 1)](https://github.com/fblpalmeira/pcir/blob/main/data/output_pci.png).
<img src="https://github.com/fblpalmeira/pcir/man/figures/diagrammer_pcir.png">
# Define the content of README.Rmd
readme_rmd_content <- "
---
output: github_document
---
```{r, include = FALSE}
knitr::opts_chunk$set(
collapse = TRUE,
comment = '#>',
fig.path = 'man/figures/logo_pcir.png', # Remove the trailing comma
out.width = '100%',
eval = TRUE)
library(pcir)
```
# pcir: Potential for Conflict Index in R <a href=\"https://fblpalmeira.github.io/pcir/\"><img src=\"man/figures/pcir_logo.png\" alt=\"pcir website\" align=\"right\" height=\"139\"/></a>
## Overview
`pcir` is an R package designed to help researchers and practitioners calculate,
compare, and visualize the Potential for Conflict Index (PCI). The PCI is a
descriptive statistical method used to enhance understanding of outcomes in
human dimensions research [(Manfredo et al. 2003)](https://www.tandfonline.com/doi/abs/10.1080/10871200304310)
and [(Vaske et al. 2010)](https://www.tandfonline.com/doi/abs/10.1080/01490401003712648).
The package will equip users with the tools required for calculating, comparing,
and graphing the potential for conflict. The concepts of consensus and
disagreement or conflict hold relevance across various fields, including economics,
political science, psychology, sociology, and natural resources. It is worth
noting that although PCI can currently be computed using software such as Excel,
SPSS, and SAS, there is no dedicated R package available for conducting this
specific analysis.
Additional information:
- [rOpenSci Champions Program](https://ropensci.org/champions/)
- [Introducing rOpenSci Champions - Cohort 2023-2024](https://ropensci.org/blog/2024/02/15/champions-program-champions-2024/)
## Theoretical approach
**Figure 1.** Likert scales of the Potential for Conflict Index (PCI).
## Workflow
Stages of the 'pcir' package:
1. Read the data input from the interviews;
2. Count the frequencies of responses within each question / Write [(Table 1)](https://github.com/fblpalmeira/pcir/blob/main/data/Table1.xlsx);
3. Calculate the potential conflict index for each question / Write [(Table 2)](https://github.com/fblpalmeira/pcir/blob/main/data/Table2.xlsx);
4. Create a bubble chart using the indices / Save [(Figure 1)](https://github.com/fblpalmeira/pcir/blob/main/data/output_pci.png).
<img src='https://github.com/fblpalmeira/pcir/man/figures/diagrammer_pcir.png'>
**Figure 2.** Workflow of the 'pcir' package.
## Features
- **`counting()`** summarize data by calculating counts, percentages, means, and
standard deviations.
- **`pci()`** compute the Potential for Conflict Index from summary data.
- **`bubble()`** visualize PCI results using a bubble plot.
## Installation
You can install the development version of `pcir` directly from GitHub:
```r
# Uncomment the line below if devtools is not installed
# install.packages(\"devtools\")
devtools::install_github(\"fblpalmeira/pcir\")
```
## Usage
Load the package if pcir is already installed.
```r
# Load the Package:
library(pcir)
```
```r
# Example dataset:
df1 <- data.frame(
A = c(-1, 2, 2, 3, -1),
B = c(-1, 2, 3, -1, 2),
C = c(1, 2, -2, 3, -1),
D = c(3, 2, 1, -1, -2),
E = c(2, 3, 1, -1, -3)
)
```
Counting function:
```r
# The counting function summarizes data by counts, percentages, means, and standard deviations
df_count <- counting(df1)
df_count
```
PCI function:
```r
# The pci function calculates the Potential for Conflict Index (PCI)
df_pci <- pci(df_count)
df_pci
```
Bubble plot function:
```r
# The bubble function creates a bubble plot to visualize the PCI results
bubble_plot <- bubble(df_pci)
bubble_plot # Display the bubble plot
```
<img src='https://github.com/fblpalmeira/pcir/man/figures/output_pci.png'>
**Figure 3.** Bubble graph illustranting the Potencial Conflict Indices.
## References
Manfredo, M., Vaske, J., Teel, T. (2003). [The potential for conflict index: A
graphic approach to practical significance of human dimensions research](https://www.tandfonline.com/doi/abs/10.1080/10871200304310).
Human Dimensions of Wildlife, 8(3), 219-228.
Vaske, J. J., Beaman, J., Barreto, H., Shelby, L. B. (2010). [An extension and
further validation of the potential for conflict index](https://www.tandfonline.com/doi/abs/10.1080/01490401003712648).
Leisure Sciences, 32(3), 240-254.
## Citation
```r
# If you use the `pcir` package in your work, please cite it as follows:
citation(package = 'pcir')
```
```r
To cite the 'pcir' package in publications, use:
Palmeira F (2024). _pcir: Potential for Conflict Index in
R_. R package version 0.1.0,
<https://github.com/fblpalmeira/pcir>.
The BibTeX entry for LaTeX users is
@Manual{,
title = {pcir: Potential for Conflict Index in R},
author = {Francesca Palmeira},
year = {2024},
note = {R package version 0.1.0},
url = {https://github.com/fblpalmeira/pcir},
}
```
## License
This package is licensed under the MIT License. See the LICENSE file for more
details.
## Contact
For any questions or inquiries, please contact Francesca Palmeira at
francesca@alumni.usp.br.
"
#Write the README.Rmd file to the local repository
writeLines(readme_rmd_content, file.path(local_dir, "README.Rmd"))
#Push the commit to the remote repository
#git2r::push(repo_url)
rmarkdown::render("README.Rmd")
# Optional: Add the pkgdown configuration file (this step can be skipped if
# `pkgdown::init_site()` was used)
config_content <- "
# Template settings
template:
bootstrap: 5
bootswatch: flatly
# Navbar settings
navbar:
structure:
left:
- Reference: reference
- Articles: articles
right:
- icon: fa-github
href: https://github.com/fblpalmeira/pcir
# URL of the pkgdown website
url: https://fblpalmeira.github.io/pcir/
"
# Write the configuration file
writeLines(config_content, file.path(local_dir, "_pkgdown.yml"))
# Build the site again to apply the config (if you added it)
pkgdown::build_site()
library(pcir)
