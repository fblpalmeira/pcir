#' pci_values <- pci(df2)
#' print(pci_values)
#' @export
pci <- function(df2) {
df2$nu <- 1 * df2$`Count -1`
df2$na <- 1 * df2$`Count 1`
df2$xt <- df2$nu + df2$na
df2$z <- 1 * df2$Total
df2$PCI <-  (1 - (df2$na / df2$xt - df2$nu / df2$xt)) * df2$xt / df2$z
df2 <- df2 %>%
mutate_if(is.numeric, round, digits = 2)
return(df2)
}
#' Create a Bubble Plot for PCI Visualization
#'
#' This function generates a bubble plot to visualize the results of the PCI calculation. It shows the mean action acceptability on the y-axis and the PCI value as the size of the bubbles.
#'
#' @param df3 A data frame generated by the `pci` function, containing the PCI values and other statistics.
#' @return A ggplot2 object representing the bubble plot.
#' @examples
#' df3 <- pci(df2)
#' p <- bubble(df3)
#' print(p)
#' @export
bubble <- function(df3) {
ggplot(df3, aes(x = name, y = Mean, size = PCI)) +
geom_hline(yintercept = 0, colour = "black") +
geom_point(color = "gray", show.legend = TRUE) +
geom_text(aes(label = after_stat(df3$PCI)),
nudge_y = 0.35, nudge_x = 0.1, size = 5) +
ylab("Action acceptability") + xlab("") +
ylim(-1, 1) +
scale_size_area(max_size = 14) +
theme_minimal() +
theme(panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text.x = element_text(size = 14, angle = 45, vjust = 1, hjust = 1),
axis.text.y = element_text(size = 14),
axis.line.x = element_line(colour = "white"),
axis.line.y = element_line(colour = "black"),
axis.ticks = element_line(colour = "black"),
legend.key.size = unit(1, 'cm'),
legend.key.height = unit(1, 'cm'),
legend.key.width = unit(1, 'cm'),
legend.title = element_text(size = 16),
legend.text = element_text(size = 14))
}
# Define the content of the DESCRIPTION file
description_text <- "
Package: pcir2
Title: Potential for Conflict Index in R - pcir
Version: 0.0.0.9000
Authors@R:
person(\"Francesca\", \"Palmeira\", , \"francesca@alumni.usp.br\", role = c(\"aut\", \"cre\"),
comment = c(ORCID = \"0000-0002-7597-1157\"))
Description: Potential for Conflict Index in R - pcir, which is a descriptive
statistical method used to enhance the understanding of outcomes in human
dimensions research. The package will equip users with the tools required for
calculating, comparing, and graphing the potential for conflict. The concepts
of consensus and disagreement/conflict hold relevance across various fields,
including economics, political science, psychology, sociology, and natural
resources.
License: MIT + file LICENSE
Encoding: UTF-8
Roxygen: list(markdown = TRUE)
RoxygenNote: 7.3.2
"
# Write the description to a DESCRIPTION file
writeLines(description_text, "DESCRIPTION")
# Define the content of the MIT License
license_text <- "
MIT License
Copyright (c) 2024 Francesca Palmeira
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the \"Software\"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"
# Write the license to a LICENSE file
writeLines(license_text, "LICENSE")
devtools::document()
devtools::build()
devtools::install()
library(devtools)
#create_package("C:\Users\Cristiano\Desktop\pcir")
use_package("dplyr")
use_package("tidyr")
use_package("ggplot2")
use_package("Hmisc")
counting <- function(df1) {
df1 %>%
select(2:6) %>%
pivot_longer(everything()) %>%
group_by(name, value) %>%
summarise(Count = n()) %>%
group_by(name) %>%
mutate(`%` = 100 * (Count / sum(Count)),
Mean = weighted.mean(value, Count),
SD = sqrt(Hmisc::wtd.var(value, Count)),
Total = sum(Count)) %>%
ungroup() %>%
pivot_wider(names_from = "value",
names_sep = " ",
values_from = c("Count", "%"),
names_vary = "slowest")
}
pci <- function(df2) {
df2$nu <- 1 * df2$`Count -1`
df2$na <- 1 * df2$`Count 1`
df2$xt <- df2$nu + df2$na
df2$z <- 1 * df2$Total
df2$PCI <-  (1 - (df2$na / df2$xt - df2$nu / df2$xt)) * df2$xt / df2$z
df2 <- df2 %>%
mutate_if(is.numeric, round, digits = 2)
return(df2)
}
bubble <- function(df3) {
ggplot(df3, aes(x = name, y = Mean, size = PCI)) +
geom_hline(yintercept = 0, colour = "black") +
geom_point(color = "gray", show.legend = TRUE) +
geom_text(aes(label = after_stat(df3$PCI)),
nudge_y = 0.35, nudge_x = 0.1, size = 5) +
ylab("Action acceptability") + xlab("") +
ylim(-1, 1) +
scale_size_area(max_size = 14) +
theme_minimal() +
theme(panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text.x = element_text(size = 14, angle = 45, vjust = 1, hjust = 1),
axis.text.y = element_text(size = 14),
axis.line.x = element_line(colour = "white"),
axis.line.y = element_line(colour = "black"),
axis.ticks = element_line(colour = "black"),
legend.key.size = unit(1, 'cm'),
legend.key.height = unit(1, 'cm'),
legend.key.width = unit(1, 'cm'),
legend.title = element_text(size = 16),
legend.text = element_text(size = 14))
}
#' Create a Count Table with Percentages, Mean, and SD
#'
#' This function takes a data frame, transforms it by computing counts, percentages, mean, and standard deviation for specified columns. It helps in summarizing the data to understand the distribution and variation.
#'
#' @param df1 A data frame containing the data to be processed. The data frame should have at least 5 columns to select from.
#' @return A data frame with computed statistics, including counts, percentages, mean, and standard deviation.
#' @examples
#' df1 <- data.frame(A = c(1, 2, 2, 3, 1), B = c(1, 2, 3, 4, 2), C = c(1, 2, 2, 3, 1), D = c(3, 2, 1, 1, 2), E = c(2, 3, 1, 1, 3))
#' result <- counting(df1)
#' print(result)
#' @export
counting <- function(df1) {
df1 %>%
select(2:6) %>%
pivot_longer(everything()) %>%
group_by(name, value) %>%
summarise(Count = n()) %>%
group_by(name) %>%
mutate(`%` = 100 * (Count / sum(Count)),
Mean = weighted.mean(value, Count),
SD = sqrt(Hmisc::wtd.var(value, Count)),
Total = sum(Count)) %>%
ungroup() %>%
pivot_wider(names_from = "value",
names_sep = " ",
values_from = c("Count", "%"),
names_vary = "slowest")
}
#' Calculate the Potential for Conflict Index (PCI)
#'
#' This function calculates the Potential for Conflict Index (PCI) based on the counts provided. PCI is useful in understanding the level of consensus and conflict in the data.
#'
#' @param df2 A data frame generated by the `counting` function, containing the counts and related statistics.
#' @return A data frame with the calculated PCI values for each group.
#' @examples
#' df2 <- counting(df1)
#' pci_values <- pci(df2)
#' print(pci_values)
#' @export
pci <- function(df2) {
df2$nu <- 1 * df2$`Count -1`
df2$na <- 1 * df2$`Count 1`
df2$xt <- df2$nu + df2$na
df2$z <- 1 * df2$Total
df2$PCI <-  (1 - (df2$na / df2$xt - df2$nu / df2$xt)) * df2$xt / df2$z
df2 <- df2 %>%
mutate_if(is.numeric, round, digits = 2)
return(df2)
}
#' Create a Bubble Plot for PCI Visualization
#'
#' This function generates a bubble plot to visualize the results of the PCI calculation. It shows the mean action acceptability on the y-axis and the PCI value as the size of the bubbles.
#'
#' @param df3 A data frame generated by the `pci` function, containing the PCI values and other statistics.
#' @return A ggplot2 object representing the bubble plot.
#' @examples
#' df3 <- pci(df2)
#' p <- bubble(df3)
#' print(p)
#' @export
bubble <- function(df3) {
ggplot(df3, aes(x = name, y = Mean, size = PCI)) +
geom_hline(yintercept = 0, colour = "black") +
geom_point(color = "gray", show.legend = TRUE) +
geom_text(aes(label = after_stat(df3$PCI)),
nudge_y = 0.35, nudge_x = 0.1, size = 5) +
ylab("Action acceptability") + xlab("") +
ylim(-1, 1) +
scale_size_area(max_size = 14) +
theme_minimal() +
theme(panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text.x = element_text(size = 14, angle = 45, vjust = 1, hjust = 1),
axis.text.y = element_text(size = 14),
axis.line.x = element_line(colour = "white"),
axis.line.y = element_line(colour = "black"),
axis.ticks = element_line(colour = "black"),
legend.key.size = unit(1, 'cm'),
legend.key.height = unit(1, 'cm'),
legend.key.width = unit(1, 'cm'),
legend.title = element_text(size = 16),
legend.text = element_text(size = 14))
}
# Define the content of the DESCRIPTION file
description_text <- "
Package: pcir2
Title: Potential for Conflict Index in R - pcir
Version: 0.0.0.9000
Authors@R:
person(\"Francesca\", \"Palmeira\", , \"francesca@alumni.usp.br\", role = c(\"aut\", \"cre\"),
comment = c(ORCID = \"0000-0002-7597-1157\"))
Description: Potential for Conflict Index in R - pcir, which is a descriptive
statistical method used to enhance the understanding of outcomes in human
dimensions research. The package will equip users with the tools required for
calculating, comparing, and graphing the potential for conflict. The concepts
of consensus and disagreement/conflict hold relevance across various fields,
including economics, political science, psychology, sociology, and natural
resources.
License: MIT + file LICENSE
Encoding: UTF-8
Roxygen: list(markdown = TRUE)
RoxygenNote: 7.3.2
"
# Write the description to a DESCRIPTION file
writeLines(description_text, "DESCRIPTION")
# Define the content of the MIT License
license_text <- "
MIT License
Copyright (c) 2024 Francesca Palmeira
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the \"Software\"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"
# Write the license to a LICENSE file
writeLines(license_text, "LICENSE")
devtools::document()
devtools::build()
devtools::install()
setwd("D:/Francesca/pcir")
library(devtools)
create_package("D:/Francesca/pcir")
3. Calculate the potential conflict index for each question / Write [(Table 2)](https://github.com/fblpalmeira/pcir/blob/main/data/Table2.xlsx);
available::available("pcir", browse = FALSE, user = "fblpalmeira")
library(devtools)
create_package("D:/Francesca/pcir")
available::available("pcir", browse = FALSE, user = "fblpalmeira")
library(devtools)
create_package("D:/Francesca/pcir")
available::available("pcir", browse = FALSE, user = "fblpalmeira")
#Write the README.Rmd file to the local repository
writeLines(readme_rmd_content, file.path(local_dir, "README.Rmd"))
# Define the content of README.Rmd
readme_rmd_content <- "
---
output: github_document
---
```{r, include = FALSE}
knitr::opts_chunk$set(
collapse = TRUE,
comment = '#>',
fig.path = 'man/figures/logo_pcir.png',
out.width = '100%',
eval = TRUE)
library(pcir)
```
# pcir: Potential for Conflict Index in R <a href=\"https://fblpalmeira.github.io/pcir/\"><img src=\"man/figures/pcir_logo.png\" alt=\"pcir website\" align=\"right\" height=\"139\"/></a>
## Overview
`pcir` is an R package developed to assist researchers and practitioners in calculating,
comparing, and visualizing the Potential for Conflict Index (PCI) among stakeholders.
PCI is a descriptive statistical method designed to enhance the understanding of
outcomes in human dimensions research[(Manfredo et al. 2003;](https://www.tandfonline.com/doi/abs/10.1080/10871200304310)
[Vaske et al. 2010)](https://www.tandfonline.com/doi/abs/10.1080/01490401003712648).
The concepts of consensus, disagreement, and conflict are relevant across a wide
range of disciplines, including economics, political science, psychology,
sociology, and natural resource management. Although PCI can be calculated using
software such as Excel, SPSS, and SAS, no dedicated R package existed for this
analysis — until now.
This package was developed as part of my training in the
[rOpenSci Champions Program](https://ropensci.org/champions/),
supported by the Chan Zuckerberg Initiative.
Additional information:
- [Introducing rOpenSci Champions - Cohort 2023-2024](https://ropensci.org/blog/2024/02/15/champions-program-champions-2024/)
## Theoretical approach
<img src=\"man/figures/likert_scales1.png\"  align=\"center\" height=\"400\"/>
**Figure 1.** Likert scales used in the Potential for Conflict Index (PCI).
## Workflow
Steps implemented in the 'pcir' package:
# 1. Read the input data from interviews – see example dataset [(Spreadsheet)]();
# 2. Count the frequency of responses for each question – see [(Table 1)]();
# 3. Calculate the PCI for each question – see [(Table 2)]();
# 4. Generate a bubble chart to visualize the results – see [(Figure)]().
<img src=\"man/figures/diagrammer_pcir.png\" align=\"center\">
**Figure 2.** Workflow of the 'pcir' package.
## Features
- `counting()`: Summarizes data by calculating counts, percentages, means, and standard deviations.
- `pci()`: Computes the Potential for Conflict Index from summary data.
- `bubble()`: Visualizes PCI results using a bubble plot.
## Installation
Install the development version of `pcir` directly from GitHub:
```r
# Uncomment the line below if devtools is not installed
# install.packages(\"devtools\")
devtools::install_github(\"fblpalmeira/pcir\")
```
## Usage
After installation, load the package:
```r
library(pcir)
```
Example dataset:
```r
df1 <- data.frame(
A = c(-1, 2, 2, 3, -1),
B = c(-1, 2, 3, -1, 2),
C = c(1, 2, -2, 3, -1),
D = c(3, 2, 1, -1, -2),
E = c(2, 3, 1, -1, -3)
)
```
Count responses:
```r
df_count <- counting(df1)
df_count
```
Calculate PCI:
```r
df_pci <- pci(df_count)
df_pci
```
Visualize with a bubble plot:
```r
# The bubble function creates a bubble plot to visualize the PCI results
bubble_plot <- bubble(df_pci)
bubble_plot # Display the bubble plot
```
<img src=\"man/figures/output_pci.png\">
**Figure 3.** Bubble chart illustrating the Potential for Conflict Indices.
## References
Manfredo, M., Vaske, J., Teel, T. (2003). [The potential for conflict index: A
graphic approach to practical significance of human dimensions research](https://www.tandfonline.com/doi/abs/10.1080/10871200304310).
Human Dimensions of Wildlife, 8(3), 219-228.
Vaske, J. J., Beaman, J., Barreto, H., Shelby, L. B. (2010). [An extension and
further validation of the potential for conflict index](https://www.tandfonline.com/doi/abs/10.1080/01490401003712648).
Leisure Sciences, 32(3), 240-254.
## Citation
If you use the `pcir` package in your work, please cite it as follows:
```r
citation(package = 'pcir')
```
Example output:
```r
To cite the 'pcir' package in publications, use:
Palmeira FBL (2024). _pcir: Potential for Conflict Index in
R_. R package version 0.1.0,
<https://github.com/fblpalmeira/pcir>.
The BibTeX entry for LaTeX users is
@Manual{,
title = {pcir: Potential for Conflict Index in R},
author = {Francesca Belem Lopes Palmeira},
year = {2024},
note = {R package version 0.1.0},
url = {https://github.com/fblpalmeira/pcir},
}
```
## License
This package is licensed under the [MIT License](https://github.com/fblpalmeira/pcir?tab=MIT-1-ov-file).
See the LICENSE file for more details.
## Bug Reports
If you encounter any bugs or issues, please report them on the [GitHub Issues](https://github.com/fblpalmeira/pcir/issues) page.
To report a bug in a GitHub repository, you need to have a GitHub account.
The account is required to interact with the repository, such as creating issues,
leaving comments, and tracking updates related to the issue.
If you don't have an account, you can create one for free on [GitHub](https://github.com/join.). Once your
account is created, you'll be able to access repositories and easily report issues.
How to Create an Issue:
- To create an issue, go to the Issues tab of your GitHub repository, which will be
visible just below the repository name, next to Pull Requests.
- Click on the **New Issue** button and fill in the details about the bug or problem
encountered.
- Users can do this at any time, and you will receive a notification when a new
issue is created.
## Discussions
The **Discussions** section is the space for the `pcir` community to have conversations,
ask questions, and post answers without opening issues. It’s a great place for
users to interact informally, share ideas, discuss how to use the package, and
seek help with problems or questions without the need to create a formal issue.
You can join the conversation and start discussing here: [pcir Discussions](https://github.com/fblpalmeira/pcir/discussions)
## Contact
For any questions or inquiries, please contact Francesca Palmeira at
francesca@alumni.usp.br.
"
#Write the README.Rmd file to the local repository
writeLines(readme_rmd_content, file.path(local_dir, "README.Rmd"))
available::available("pcir", browse = FALSE, user = "fblpalmeira")
library(devtools)
create_package("D:/Francesca/pcir")
devtools::document()
install.packages("readr")
# Etapa opcional: verifique o status atual do git
usethis::git_sitrep()
# Faça o commit e push das mudanças
usethis::use_git(message = "Atualiza documentação e Addin do pacote pcir", push = TRUE)
# Load the library
library(usethis)
# Set the working directory to the package folder
setwd("D:/Francesca/pcir")
# Optional step: check the current Git status
usethis::
# Load the library
library(usethis)
# Set the working directory to the package folder
setwd("D:/Francesca/pcir")
# Optional step: check the current Git status
usethis::git_sitrep()
# Commit and push the changes
usethis::use_git(message = "Update documentation and Addin for the pcir package", push = TRUE)
# Optional step: check the current Git status
usethis::git_sitrep()
# Commit the changes
usethis::use_git(message = "Update documentation and Addin for the pcir package")
# Push the changes to GitHub
system("git push")
# Forçar o push para o GitHub, substituindo tudo no repositório remoto
system("git push origin main --force")
available::available("pcir", browse = FALSE, user = "fblpalmeira")
library(devtools)
create_package("D:/Francesca/pcir")
install.packages("testthat")
devtools::test()
library(testthat)
print(names(input_data))
devtools::test()
str(input_data)
devtools::test()
devtools::test()
devtools::test()
library(tidyr)
library(Hmisc)
tools::showNonASCIIfile
tools::showNonASCIIfile("R/counting.R")
tools::showNonASCIIfile("R/bubble.R")
available::available("pcir", browse = FALSE, user = "fblpalmeira")
library(devtools)
create_package("D:/Francesca/pcir")
tools::checkNonASCII(dir("R", full.names = TRUE))
available::available("pcir", browse = FALSE, user = "fblpalmeira")
library(devtools)
create_package("D:/Francesca/pcir")
install.packages("readxl")
available::available("pcir", browse = FALSE, user = "fblpalmeira")
library(devtools)
create_package("D:/Francesca/pcir")
available::available("pcir", browse = FALSE, user = "fblpalmeira")
library(devtools)
create_package("D:/Francesca/pcir")
pkgdown::build_site()
pkgdown::build_site()
usethis::use_mit_license("Francesca Palmeira")
