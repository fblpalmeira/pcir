group_by(name) %>%
mutate(`%` = 100 * (Count / sum(Count)),
Mean = weighted.mean(value, Count),
SD = sqrt(Hmisc::wtd.var(value, Count)),
Total = sum(Count)) %>%
ungroup() %>%
pivot_wider(names_from = "value",
names_sep = " ",
values_from = c("Count", "%"),
names_vary = "slowest")
}
#' Calculate the Potential for Conflict Index (PCI)
#'
#' This function calculates the Potential for Conflict Index (PCI) based on the counts provided. PCI is useful in understanding the level of consensus and conflict in the data.
#'
#' @param df2 A data frame generated by the `counting` function, containing the counts and related statistics.
#' @return A data frame with the calculated PCI values for each group.
#' @examples
#' df2 <- counting(df1)
#' pci_values <- pci(df2)
#' print(pci_values)
#' @export
pci <- function(df2) {
df2$nu <- 1 * df2$`Count -1`
df2$na <- 1 * df2$`Count 1`
df2$xt <- df2$nu + df2$na
df2$z <- 1 * df2$Total
df2$PCI <-  (1 - (df2$na / df2$xt - df2$nu / df2$xt)) * df2$xt / df2$z
df2 <- df2 %>%
mutate_if(is.numeric, round, digits = 2)
return(df2)
}
#' Create a Bubble Plot for PCI Visualization
#'
#' This function generates a bubble plot to visualize the results of the PCI calculation. It shows the mean action acceptability on the y-axis and the PCI value as the size of the bubbles.
#'
#' @param df3 A data frame generated by the `pci` function, containing the PCI values and other statistics.
#' @return A ggplot2 object representing the bubble plot.
#' @examples
#' df3 <- pci(df2)
#' p <- bubble(df3)
#' print(p)
#' @export
bubble <- function(df3) {
ggplot(df3, aes(x = name, y = Mean, size = PCI)) +
geom_hline(yintercept = 0, colour = "black") +
geom_point(color = "gray", show.legend = TRUE) +
geom_text(aes(label = after_stat(df3$PCI)),
nudge_y = 0.35, nudge_x = 0.1, size = 5) +
ylab("Action acceptability") + xlab("") +
ylim(-1, 1) +
scale_size_area(max_size = 14) +
theme_minimal() +
theme(panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text.x = element_text(size = 14, angle = 45, vjust = 1, hjust = 1),
axis.text.y = element_text(size = 14),
axis.line.x = element_line(colour = "white"),
axis.line.y = element_line(colour = "black"),
axis.ticks = element_line(colour = "black"),
legend.key.size = unit(1, 'cm'),
legend.key.height = unit(1, 'cm'),
legend.key.width = unit(1, 'cm'),
legend.title = element_text(size = 16),
legend.text = element_text(size = 14))
}
# Define the content of the DESCRIPTION file
description_text <- "
Package: pcir2
Title: Potential for Conflict Index in R - pcir
Version: 0.0.0.9000
Authors@R:
person(\"Francesca\", \"Palmeira\", , \"francesca@alumni.usp.br\", role = c(\"aut\", \"cre\"),
comment = c(ORCID = \"0000-0002-7597-1157\"))
Description: Potential for Conflict Index in R - pcir, which is a descriptive
statistical method used to enhance the understanding of outcomes in human
dimensions research. The package will equip users with the tools required for
calculating, comparing, and graphing the potential for conflict. The concepts
of consensus and disagreement/conflict hold relevance across various fields,
including economics, political science, psychology, sociology, and natural
resources.
License: MIT + file LICENSE
Encoding: UTF-8
Roxygen: list(markdown = TRUE)
RoxygenNote: 7.3.2
"
# Write the description to a DESCRIPTION file
writeLines(description_text, "DESCRIPTION")
# Define the content of the MIT License
license_text <- "
MIT License
Copyright (c) 2024 Francesca Palmeira
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the \"Software\"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"
# Write the license to a LICENSE file
writeLines(license_text, "LICENSE")
devtools::document()
devtools::build()
devtools::install()
library(devtools)
#create_package("C:\Users\Cristiano\Desktop\pcir")
use_package("dplyr")
use_package("tidyr")
use_package("ggplot2")
use_package("Hmisc")
counting <- function(df1) {
df1 %>%
select(2:6) %>%
pivot_longer(everything()) %>%
group_by(name, value) %>%
summarise(Count = n()) %>%
group_by(name) %>%
mutate(`%` = 100 * (Count / sum(Count)),
Mean = weighted.mean(value, Count),
SD = sqrt(Hmisc::wtd.var(value, Count)),
Total = sum(Count)) %>%
ungroup() %>%
pivot_wider(names_from = "value",
names_sep = " ",
values_from = c("Count", "%"),
names_vary = "slowest")
}
pci <- function(df2) {
df2$nu <- 1 * df2$`Count -1`
df2$na <- 1 * df2$`Count 1`
df2$xt <- df2$nu + df2$na
df2$z <- 1 * df2$Total
df2$PCI <-  (1 - (df2$na / df2$xt - df2$nu / df2$xt)) * df2$xt / df2$z
df2 <- df2 %>%
mutate_if(is.numeric, round, digits = 2)
return(df2)
}
bubble <- function(df3) {
ggplot(df3, aes(x = name, y = Mean, size = PCI)) +
geom_hline(yintercept = 0, colour = "black") +
geom_point(color = "gray", show.legend = TRUE) +
geom_text(aes(label = after_stat(df3$PCI)),
nudge_y = 0.35, nudge_x = 0.1, size = 5) +
ylab("Action acceptability") + xlab("") +
ylim(-1, 1) +
scale_size_area(max_size = 14) +
theme_minimal() +
theme(panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text.x = element_text(size = 14, angle = 45, vjust = 1, hjust = 1),
axis.text.y = element_text(size = 14),
axis.line.x = element_line(colour = "white"),
axis.line.y = element_line(colour = "black"),
axis.ticks = element_line(colour = "black"),
legend.key.size = unit(1, 'cm'),
legend.key.height = unit(1, 'cm'),
legend.key.width = unit(1, 'cm'),
legend.title = element_text(size = 16),
legend.text = element_text(size = 14))
}
#' Create a Count Table with Percentages, Mean, and SD
#'
#' This function takes a data frame, transforms it by computing counts, percentages, mean, and standard deviation for specified columns. It helps in summarizing the data to understand the distribution and variation.
#'
#' @param df1 A data frame containing the data to be processed. The data frame should have at least 5 columns to select from.
#' @return A data frame with computed statistics, including counts, percentages, mean, and standard deviation.
#' @examples
#' df1 <- data.frame(A = c(1, 2, 2, 3, 1), B = c(1, 2, 3, 4, 2), C = c(1, 2, 2, 3, 1), D = c(3, 2, 1, 1, 2), E = c(2, 3, 1, 1, 3))
#' result <- counting(df1)
#' print(result)
#' @export
counting <- function(df1) {
df1 %>%
select(2:6) %>%
pivot_longer(everything()) %>%
group_by(name, value) %>%
summarise(Count = n()) %>%
group_by(name) %>%
mutate(`%` = 100 * (Count / sum(Count)),
Mean = weighted.mean(value, Count),
SD = sqrt(Hmisc::wtd.var(value, Count)),
Total = sum(Count)) %>%
ungroup() %>%
pivot_wider(names_from = "value",
names_sep = " ",
values_from = c("Count", "%"),
names_vary = "slowest")
}
#' Calculate the Potential for Conflict Index (PCI)
#'
#' This function calculates the Potential for Conflict Index (PCI) based on the counts provided. PCI is useful in understanding the level of consensus and conflict in the data.
#'
#' @param df2 A data frame generated by the `counting` function, containing the counts and related statistics.
#' @return A data frame with the calculated PCI values for each group.
#' @examples
#' df2 <- counting(df1)
#' pci_values <- pci(df2)
#' print(pci_values)
#' @export
pci <- function(df2) {
df2$nu <- 1 * df2$`Count -1`
df2$na <- 1 * df2$`Count 1`
df2$xt <- df2$nu + df2$na
df2$z <- 1 * df2$Total
df2$PCI <-  (1 - (df2$na / df2$xt - df2$nu / df2$xt)) * df2$xt / df2$z
df2 <- df2 %>%
mutate_if(is.numeric, round, digits = 2)
return(df2)
}
#' Create a Bubble Plot for PCI Visualization
#'
#' This function generates a bubble plot to visualize the results of the PCI calculation. It shows the mean action acceptability on the y-axis and the PCI value as the size of the bubbles.
#'
#' @param df3 A data frame generated by the `pci` function, containing the PCI values and other statistics.
#' @return A ggplot2 object representing the bubble plot.
#' @examples
#' df3 <- pci(df2)
#' p <- bubble(df3)
#' print(p)
#' @export
bubble <- function(df3) {
ggplot(df3, aes(x = name, y = Mean, size = PCI)) +
geom_hline(yintercept = 0, colour = "black") +
geom_point(color = "gray", show.legend = TRUE) +
geom_text(aes(label = after_stat(df3$PCI)),
nudge_y = 0.35, nudge_x = 0.1, size = 5) +
ylab("Action acceptability") + xlab("") +
ylim(-1, 1) +
scale_size_area(max_size = 14) +
theme_minimal() +
theme(panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text.x = element_text(size = 14, angle = 45, vjust = 1, hjust = 1),
axis.text.y = element_text(size = 14),
axis.line.x = element_line(colour = "white"),
axis.line.y = element_line(colour = "black"),
axis.ticks = element_line(colour = "black"),
legend.key.size = unit(1, 'cm'),
legend.key.height = unit(1, 'cm'),
legend.key.width = unit(1, 'cm'),
legend.title = element_text(size = 16),
legend.text = element_text(size = 14))
}
# Define the content of the DESCRIPTION file
description_text <- "
Package: pcir2
Title: Potential for Conflict Index in R - pcir
Version: 0.0.0.9000
Authors@R:
person(\"Francesca\", \"Palmeira\", , \"francesca@alumni.usp.br\", role = c(\"aut\", \"cre\"),
comment = c(ORCID = \"0000-0002-7597-1157\"))
Description: Potential for Conflict Index in R - pcir, which is a descriptive
statistical method used to enhance the understanding of outcomes in human
dimensions research. The package will equip users with the tools required for
calculating, comparing, and graphing the potential for conflict. The concepts
of consensus and disagreement/conflict hold relevance across various fields,
including economics, political science, psychology, sociology, and natural
resources.
License: MIT + file LICENSE
Encoding: UTF-8
Roxygen: list(markdown = TRUE)
RoxygenNote: 7.3.2
"
# Write the description to a DESCRIPTION file
writeLines(description_text, "DESCRIPTION")
# Define the content of the MIT License
license_text <- "
MIT License
Copyright (c) 2024 Francesca Palmeira
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the \"Software\"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"
# Write the license to a LICENSE file
writeLines(license_text, "LICENSE")
devtools::document()
devtools::build()
devtools::install()
library(devtools)
#create_package("C:\Users\Cristiano\Desktop\pcir")
use_package("dplyr")
use_package("tidyr")
use_package("ggplot2")
use_package("Hmisc")
counting <- function(df1) {
df1 %>%
select(2:6) %>%
pivot_longer(everything()) %>%
group_by(name, value) %>%
summarise(Count = n()) %>%
group_by(name) %>%
mutate(`%` = 100 * (Count / sum(Count)),
Mean = weighted.mean(value, Count),
SD = sqrt(Hmisc::wtd.var(value, Count)),
Total = sum(Count)) %>%
ungroup() %>%
pivot_wider(names_from = "value",
names_sep = " ",
values_from = c("Count", "%"),
names_vary = "slowest")
}
pci <- function(df2) {
df2$nu <- 1 * df2$`Count -1`
df2$na <- 1 * df2$`Count 1`
df2$xt <- df2$nu + df2$na
df2$z <- 1 * df2$Total
df2$PCI <-  (1 - (df2$na / df2$xt - df2$nu / df2$xt)) * df2$xt / df2$z
df2 <- df2 %>%
mutate_if(is.numeric, round, digits = 2)
return(df2)
}
bubble <- function(df3) {
ggplot(df3, aes(x = name, y = Mean, size = PCI)) +
geom_hline(yintercept = 0, colour = "black") +
geom_point(color = "gray", show.legend = TRUE) +
geom_text(aes(label = after_stat(df3$PCI)),
nudge_y = 0.35, nudge_x = 0.1, size = 5) +
ylab("Action acceptability") + xlab("") +
ylim(-1, 1) +
scale_size_area(max_size = 14) +
theme_minimal() +
theme(panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text.x = element_text(size = 14, angle = 45, vjust = 1, hjust = 1),
axis.text.y = element_text(size = 14),
axis.line.x = element_line(colour = "white"),
axis.line.y = element_line(colour = "black"),
axis.ticks = element_line(colour = "black"),
legend.key.size = unit(1, 'cm'),
legend.key.height = unit(1, 'cm'),
legend.key.width = unit(1, 'cm'),
legend.title = element_text(size = 16),
legend.text = element_text(size = 14))
}
#' Create a Count Table with Percentages, Mean, and SD
#'
#' This function takes a data frame, transforms it by computing counts, percentages, mean, and standard deviation for specified columns. It helps in summarizing the data to understand the distribution and variation.
#'
#' @param df1 A data frame containing the data to be processed. The data frame should have at least 5 columns to select from.
#' @return A data frame with computed statistics, including counts, percentages, mean, and standard deviation.
#' @examples
#' df1 <- data.frame(A = c(1, 2, 2, 3, 1), B = c(1, 2, 3, 4, 2), C = c(1, 2, 2, 3, 1), D = c(3, 2, 1, 1, 2), E = c(2, 3, 1, 1, 3))
#' result <- counting(df1)
#' print(result)
#' @export
counting <- function(df1) {
df1 %>%
select(2:6) %>%
pivot_longer(everything()) %>%
group_by(name, value) %>%
summarise(Count = n()) %>%
group_by(name) %>%
mutate(`%` = 100 * (Count / sum(Count)),
Mean = weighted.mean(value, Count),
SD = sqrt(Hmisc::wtd.var(value, Count)),
Total = sum(Count)) %>%
ungroup() %>%
pivot_wider(names_from = "value",
names_sep = " ",
values_from = c("Count", "%"),
names_vary = "slowest")
}
#' Calculate the Potential for Conflict Index (PCI)
#'
#' This function calculates the Potential for Conflict Index (PCI) based on the counts provided. PCI is useful in understanding the level of consensus and conflict in the data.
#'
#' @param df2 A data frame generated by the `counting` function, containing the counts and related statistics.
#' @return A data frame with the calculated PCI values for each group.
#' @examples
#' df2 <- counting(df1)
#' pci_values <- pci(df2)
#' print(pci_values)
#' @export
pci <- function(df2) {
df2$nu <- 1 * df2$`Count -1`
df2$na <- 1 * df2$`Count 1`
df2$xt <- df2$nu + df2$na
df2$z <- 1 * df2$Total
df2$PCI <-  (1 - (df2$na / df2$xt - df2$nu / df2$xt)) * df2$xt / df2$z
df2 <- df2 %>%
mutate_if(is.numeric, round, digits = 2)
return(df2)
}
#' Create a Bubble Plot for PCI Visualization
#'
#' This function generates a bubble plot to visualize the results of the PCI calculation. It shows the mean action acceptability on the y-axis and the PCI value as the size of the bubbles.
#'
#' @param df3 A data frame generated by the `pci` function, containing the PCI values and other statistics.
#' @return A ggplot2 object representing the bubble plot.
#' @examples
#' df3 <- pci(df2)
#' p <- bubble(df3)
#' print(p)
#' @export
bubble <- function(df3) {
ggplot(df3, aes(x = name, y = Mean, size = PCI)) +
geom_hline(yintercept = 0, colour = "black") +
geom_point(color = "gray", show.legend = TRUE) +
geom_text(aes(label = after_stat(df3$PCI)),
nudge_y = 0.35, nudge_x = 0.1, size = 5) +
ylab("Action acceptability") + xlab("") +
ylim(-1, 1) +
scale_size_area(max_size = 14) +
theme_minimal() +
theme(panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text.x = element_text(size = 14, angle = 45, vjust = 1, hjust = 1),
axis.text.y = element_text(size = 14),
axis.line.x = element_line(colour = "white"),
axis.line.y = element_line(colour = "black"),
axis.ticks = element_line(colour = "black"),
legend.key.size = unit(1, 'cm'),
legend.key.height = unit(1, 'cm'),
legend.key.width = unit(1, 'cm'),
legend.title = element_text(size = 16),
legend.text = element_text(size = 14))
}
# Define the content of the DESCRIPTION file
description_text <- "
Package: pcir2
Title: Potential for Conflict Index in R - pcir
Version: 0.0.0.9000
Authors@R:
person(\"Francesca\", \"Palmeira\", , \"francesca@alumni.usp.br\", role = c(\"aut\", \"cre\"),
comment = c(ORCID = \"0000-0002-7597-1157\"))
Description: Potential for Conflict Index in R - pcir, which is a descriptive
statistical method used to enhance the understanding of outcomes in human
dimensions research. The package will equip users with the tools required for
calculating, comparing, and graphing the potential for conflict. The concepts
of consensus and disagreement/conflict hold relevance across various fields,
including economics, political science, psychology, sociology, and natural
resources.
License: MIT + file LICENSE
Encoding: UTF-8
Roxygen: list(markdown = TRUE)
RoxygenNote: 7.3.2
"
# Write the description to a DESCRIPTION file
writeLines(description_text, "DESCRIPTION")
# Define the content of the MIT License
license_text <- "
MIT License
Copyright (c) 2024 Francesca Palmeira
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the \"Software\"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"
# Write the license to a LICENSE file
writeLines(license_text, "LICENSE")
devtools::document()
devtools::build()
devtools::install()
setwd("D:/Francesca/pcir")
library(devtools)
create_package("D:/Francesca/pcir")
3. Calculate the potential conflict index for each question / Write [(Table 2)](https://github.com/fblpalmeira/pcir/blob/main/data/Table2.xlsx);
available::available("pcir", browse = FALSE, user = "fblpalmeira")
library(devtools)
create_package("D:/Francesca/pcir")
